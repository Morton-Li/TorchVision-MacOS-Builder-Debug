name: Auto Build TorchVision

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 18 * * *'  # 每天 18:00 UTC 自动执行

jobs:
  get_latest_tag:
    runs-on: macos-13
    outputs:
      version: ${{ steps.get_tag.outputs.version }}
      skip_build: ${{ steps.get_tag.outputs.skip_build }}
    steps:
      - name: Get latest TorchVision stable tag
        id: get_tag
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/pytorch/vision/tags)

          if echo "$RESPONSE" | jq -e 'type=="array"' >/dev/null; then
            LATEST_TAG=$(echo "$RESPONSE" | jq -r '.[].name' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -Vr | head -n 1)
          else
            echo "❌ Unexpected response: $RESPONSE"
            exit 1
          fi

          echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

          # 获取当前 repo 的 Releases
          RELEASES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")
          # 判断是否为空数组
          if echo "$RELEASES_JSON" | jq -e 'length == 0' >/dev/null; then
            echo "ℹ️ No releases found. Will proceed to build $LATEST_TAG."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          else
            EXISTING_TAGS=$(echo "$RELEASES_JSON" | jq -r '.[].tag_name')
            if echo "$EXISTING_TAGS" | grep -q "^$LATEST_TAG$"; then
              echo "✅ $LATEST_TAG already in releases. Skipping build."
              echo "skip_build=true" >> $GITHUB_OUTPUT
            else
              echo "⏳ $LATEST_TAG not released. Will proceed to build and upload."
              echo "skip_build=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Stop early if already built
        if: steps.get_tag.outputs.skip_build == 'true'
        run: |
          echo "✅ Build skipped."

      - name: Restore TorchVision source from cache
        if: steps.get_tag.outputs.skip_build == 'false'
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: vision
          key: vision-${{ steps.get_tag.outputs.version }}

      - name: Clone TorchVision repo
        if: steps.get_tag.outputs.skip_build == 'false' && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch "v${{ steps.get_tag.outputs.version }}" --recursive https://github.com/pytorch/vision.git vision
          git -C vision submodule update --init --recursive --depth 1 || git -C vision submodule update --init --recursive --depth 10 || git -C vision submodule update --init --recursive

      - name: Save TorchVision source to cache
        id: cache-save
        if: steps.get_tag.outputs.skip_build == 'false' && steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: vision
          key: vision-${{ steps.get_tag.outputs.version }}

  build:
    runs-on: macos-13
    needs: get_latest_tag
    if: needs.get_latest_tag.outputs.skip_build == 'false'
    strategy:
      matrix:
        python_version: [ 3.11, 3.12, 3.13 ]
    name: Build TorchVision for Python ${{ matrix.python_version }}
    steps:
      - name: Restore TorchVision source from cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: vision
          key: vision-${{ needs.get_latest_tag.outputs.version }}

      - name: Clone TorchVision repo
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch "v${{ needs.get_latest_tag.outputs.version }}" --recursive https://github.com/pytorch/vision.git vision
          git -C vision submodule update --init --recursive --depth 1 || git -C vision submodule update --init --recursive --depth 10 || git -C vision submodule update --init --recursive

      - name: Build wheel
        run: |
          set -e
          

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vision-${{ needs.get_latest_tag.outputs.version }}-py${{ matrix.python_version }}-macosx-wheel
          path: wheels/*.whl

  release:
    needs: [ get_latest_tag, build ]
    if: needs.get_latest_tag.outputs.skip_build == 'false'
    runs-on: macos-13
    name: Create release and upload wheels
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          merge-multiple: true

      - name: Create release and upload wheels
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_latest_tag.outputs.version }}
          name: "TorchVision ${{ needs.get_latest_tag.outputs.version }} Release"
          files: wheels/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
